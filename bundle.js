(()=>{"use strict";var n={756:(n,t,e)=>{e.d(t,{Z:()=>s});var a=e(537),o=e.n(a),r=e(645),i=e.n(r)()(o());i.push([n.id,"/* whole container */\n.inbox-container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 70%;\n    padding: 20px 20px;\n    margin: 0 auto;\n}\n\n/* title */\n#inbox {\n    margin-bottom: 10px;\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: Bold;\n    font-weight: 500;\n}\n\n.project-sub-head {\n    margin-bottom: 10px;\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: Bold;\n    font-weight: 500;\n}\n\n/*  button to open option to add tasks */\n#date-picker {\n    margin: 10px;\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n#date-picker:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}\n.task-add {\n    display: flex;\n    flex-direction: column;\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n}\n.task-add {\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n    width: 500px;\n}\n.task-add:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}\n\n/* hides any element that has this class */\n.close {\n    display: none;\n}\n\n/* actual task list */\n.task-list-holder {\n    display: flex;\n    font-family: 'MuktaVaani-Light';\n    flex-direction: column;\n    justify-content: center;\n    width: 70%;\n    padding: 10px 10px;\n    margin: 0 auto;\n}\n/* task list items */\n.task-items {\n    font-size: 20px;\n    font-weight: bolder;\n    color: #1F1B26;\n    background-color: transparent;\n    border-radius: 10px;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n.task-items {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    margin: 5px;\n    padding: 10px;\n    cursor: default;\n}\n.task-items:hover {\n    cursor: pointer;\n    background: #1F1B26;\n    color: #fff;\n}\n/* items inside of each task */\n.task-name {\n    margin-right: auto;\n}\n.date-picker-div {\n    margin-left: auto;\n}\n.delete-button {\n    display: flex;\n    align-items: center; \n    box-sizing: border-box;\n    border:none;\n    background: none;\n    margin: 5px;\n    width: 10px;\n    margin-left: auto;\n}\n.delete-button:hover {\n    cursor: pointer;\n}\n.far {\n    font-weight: 400;\n    color: #1F1B26;\n}\n\n/* hidden container below the list*/\n.add-container-div {\n    width: 500px;\n    margin-top: 50px;\n    text-align: center;\n}\n/* input section in hidden container*/\n#input-add-task {\n    color: #1F1B26;\n    width: 80%;\n    margin: 10px;\n    font-size: 1.3rem;\n    border: 0;\n    border-bottom: 2px solid;\n    outline: 0;\n}\n/* hidden div that shows */\n.active {\n    display: block;\n    width: 100%; \n    padding: 10px;\n    text-align: center;\n}\n/* buttons div below input section*/\n.button-container-tasks {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n}\n.buttons-tasks-add {\n    font-size: 14px;\n    border-radius: 2px;\n    padding: 11px 16px;\n    width: 100px;\n}\n.buttons-tasks-add {\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n.buttons-tasks-add:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA,oBAAoB;AACpB;IACI,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,UAAU;IACV,kBAAkB;IAClB,cAAc;AAClB;;AAEA,UAAU;AACV;IACI,mBAAmB;IACnB,cAAc;IACd,cAAc;IACd,6BAA6B;IAC7B,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,cAAc;IACd,6BAA6B;IAC7B,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA,wCAAwC;AACxC;IACI,YAAY;IACZ,qBAAqB;IACrB,6BAA6B;IAC7B,cAAc;IACd,+CAA+C;IAC/C,uCAAuC;OACpC,oCAAoC;QACnC,mCAAmC;SAClC,kCAAkC;YAC/B,+BAA+B;AAC3C;AACA;IACI,eAAe;IACf,wBAAwB;IACxB,mBAAmB;IACnB,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,gCAAgC;IAChC,eAAe;AACnB;AACA;IACI,qBAAqB;IACrB,6BAA6B;IAC7B,cAAc;IACd,+CAA+C;IAC/C,uCAAuC;OACpC,oCAAoC;QACnC,mCAAmC;SAClC,kCAAkC;YAC/B,+BAA+B;IACvC,YAAY;AAChB;AACA;IACI,eAAe;IACf,wBAAwB;IACxB,mBAAmB;IACnB,WAAW;AACf;;AAEA,0CAA0C;AAC1C;IACI,aAAa;AACjB;;AAEA,qBAAqB;AACrB;IACI,aAAa;IACb,+BAA+B;IAC/B,sBAAsB;IACtB,uBAAuB;IACvB,UAAU;IACV,kBAAkB;IAClB,cAAc;AAClB;AACA,oBAAoB;AACpB;IACI,eAAe;IACf,mBAAmB;IACnB,cAAc;IACd,6BAA6B;IAC7B,mBAAmB;IACnB,+CAA+C;IAC/C,uCAAuC;OACpC,oCAAoC;QACnC,mCAAmC;SAClC,kCAAkC;YAC/B,+BAA+B;AAC3C;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;IACX,WAAW;IACX,aAAa;IACb,eAAe;AACnB;AACA;IACI,eAAe;IACf,mBAAmB;IACnB,WAAW;AACf;AACA,8BAA8B;AAC9B;IACI,kBAAkB;AACtB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,WAAW;IACX,gBAAgB;IAChB,WAAW;IACX,WAAW;IACX,iBAAiB;AACrB;AACA;IACI,eAAe;AACnB;AACA;IACI,gBAAgB;IAChB,cAAc;AAClB;;AAEA,mCAAmC;AACnC;IACI,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;AACtB;AACA,qCAAqC;AACrC;IACI,cAAc;IACd,UAAU;IACV,YAAY;IACZ,iBAAiB;IACjB,SAAS;IACT,wBAAwB;IACxB,UAAU;AACd;AACA,0BAA0B;AAC1B;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;AACtB;AACA,mCAAmC;AACnC;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb;AACA;IACI,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,qBAAqB;IACrB,6BAA6B;IAC7B,cAAc;IACd,+CAA+C;IAC/C,uCAAuC;OACpC,oCAAoC;QACnC,mCAAmC;SAClC,kCAAkC;YAC/B,+BAA+B;AAC3C;AACA;IACI,eAAe;IACf,wBAAwB;IACxB,mBAAmB;IACnB,WAAW;AACf",sourcesContent:["/* whole container */\n.inbox-container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 70%;\n    padding: 20px 20px;\n    margin: 0 auto;\n}\n\n/* title */\n#inbox {\n    margin-bottom: 10px;\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: Bold;\n    font-weight: 500;\n}\n\n.project-sub-head {\n    margin-bottom: 10px;\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: Bold;\n    font-weight: 500;\n}\n\n/*  button to open option to add tasks */\n#date-picker {\n    margin: 10px;\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n#date-picker:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}\n.task-add {\n    display: flex;\n    flex-direction: column;\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n}\n.task-add {\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n    width: 500px;\n}\n.task-add:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}\n\n/* hides any element that has this class */\n.close {\n    display: none;\n}\n\n/* actual task list */\n.task-list-holder {\n    display: flex;\n    font-family: 'MuktaVaani-Light';\n    flex-direction: column;\n    justify-content: center;\n    width: 70%;\n    padding: 10px 10px;\n    margin: 0 auto;\n}\n/* task list items */\n.task-items {\n    font-size: 20px;\n    font-weight: bolder;\n    color: #1F1B26;\n    background-color: transparent;\n    border-radius: 10px;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n.task-items {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    margin: 5px;\n    padding: 10px;\n    cursor: default;\n}\n.task-items:hover {\n    cursor: pointer;\n    background: #1F1B26;\n    color: #fff;\n}\n/* items inside of each task */\n.task-name {\n    margin-right: auto;\n}\n.date-picker-div {\n    margin-left: auto;\n}\n.delete-button {\n    display: flex;\n    align-items: center; \n    box-sizing: border-box;\n    border:none;\n    background: none;\n    margin: 5px;\n    width: 10px;\n    margin-left: auto;\n}\n.delete-button:hover {\n    cursor: pointer;\n}\n.far {\n    font-weight: 400;\n    color: #1F1B26;\n}\n\n/* hidden container below the list*/\n.add-container-div {\n    width: 500px;\n    margin-top: 50px;\n    text-align: center;\n}\n/* input section in hidden container*/\n#input-add-task {\n    color: #1F1B26;\n    width: 80%;\n    margin: 10px;\n    font-size: 1.3rem;\n    border: 0;\n    border-bottom: 2px solid;\n    outline: 0;\n}\n/* hidden div that shows */\n.active {\n    display: block;\n    width: 100%; \n    padding: 10px;\n    text-align: center;\n}\n/* buttons div below input section*/\n.button-container-tasks {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n}\n.buttons-tasks-add {\n    font-size: 14px;\n    border-radius: 2px;\n    padding: 11px 16px;\n    width: 100px;\n}\n.buttons-tasks-add {\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n.buttons-tasks-add:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}"],sourceRoot:""}]);const s=i},434:(n,t,e)=>{e.d(t,{Z:()=>s});var a=e(537),o=e.n(a),r=e(645),i=e.n(r)()(o());i.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},890:(n,t,e)=>{e.d(t,{Z:()=>C});var a=e(537),o=e.n(a),r=e(645),i=e.n(r),s=e(667),d=e.n(s),c=new URL(e(505),e.b),l=new URL(e(204),e.b),u=new URL(e(622),e.b),A=i()(o()),m=d()(c),f=d()(l),p=d()(u);A.push([n.id,"/* fonts */\n@font-face {\n    font-family: 'Cantarell-Regular';\n    src: url("+m+");\n}\n@font-face {\n    font-family: 'Libre Franklin';\n    src: url("+f+");\n}\n@font-face {\n    font-family: 'MuktaVaani-Light';\n    src: url("+p+");\n}\n\n\n#content {\n    display: grid; \n    grid-template-columns: 0.3fr 1.5fr; \n    grid-template-rows: 5rem 1.7fr; \n    gap: 0px 0px; \n    grid-template-areas: \n        \"header header\"\n        \"side-bar content\"; \n    overflow: hidden;\n}\n#content {\n    height: 100vh;\n    width: 100vw;\n}\n.header {\n    grid-area: header;\n    background-color: #1F1B26;\n    display: flex; \n    overflow: hidden;\n    justify-content: flex-start;\n    align-items: center;\n}\n.header > h1 {\n    padding-left: 30px;\n    font-family: 'Libre Franklin';\n    font-style: initial;\n    font-size: 30px;\n    color:#F5F4F4;\n}\n.side-bar {\n    background-color: rgb(226, 226, 226);\n    grid-area: side-bar;\n    padding: 10px;\n    min-width: 250px;\n    max-width: 300px;\n}\n\n.default-section {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    margin-top: 10px;\n}\n.default-title {\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: oblique;\n    font-weight: 500;\n}\n.default-buttons {\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n    border-radius: 5px;\n    margin: 15px;\n    width: 90%;\n    border: none;\n    background: none;\n    color: #1F1B26;\n}\n.default-buttons:hover {\n    color: white;\n    font-weight: bolder;\n    cursor: pointer;\n    background: transparent;\n    background-color: #1F1B26;\n}\n.fa-house {\n    margin-right: 5px;\n}\n\n.projects-section {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    margin-top: 5px;\n}\n.projects-title {\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: oblique;\n    font-weight: 500;\n}\n.project-button {\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n    border-radius: 5px;\n    width: 90%;\n    margin: 15px;\n    border: none;\n    background: none;\n    color: #1F1B26;\n}\n.project-button:hover {\n    color: white;\n    font-weight: bolder;\n    cursor: pointer;\n    background: transparent;\n    background-color: #1F1B26;\n}\n.project-add-div {\n    width: 90%;\n    margin-top: 10px;\n    text-align: center; \n}\n#project-add-task {\n    color: #1F1B26;\n    background: none;\n    width: 80%;\n    margin: 10px;\n    font-size: 1.3rem;\n    border: 0;\n    border-bottom: 2px solid;\n    outline: 0;\n}\n.project-button-container {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n}\n.project-button-bar {\n    font-size: 14px;\n    border-radius: 2px;\n    padding: 11px 16px;\n    width: 100px;\n}\n.project-button-bar {\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n.project-button-bar:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}\n.project-items {\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n    border-radius: 5px;\n    width: 90%;\n    margin: 15px;\n    border: none;\n    background: none;\n    color: #1F1B26;\n}\n.project-items {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 70%;\n    margin: 5px;\n    padding: 10px;\n    cursor: default;\n}\n.project-items:hover {\n    color: white;\n    font-weight: bolder;\n    cursor: pointer;\n    background: transparent;\n    background-color: #1F1B26;\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA,UAAU;AACV;IACI,gCAAgC;IAChC,4CAA0C;AAC9C;AACA;IACI,6BAA6B;IAC7B,4CAAgD;AACpD;AACA;IACI,+BAA+B;IAC/B,4CAAyC;AAC7C;;;AAGA;IACI,aAAa;IACb,kCAAkC;IAClC,8BAA8B;IAC9B,YAAY;IACZ;;0BAEsB;IACtB,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,yBAAyB;IACzB,aAAa;IACb,gBAAgB;IAChB,2BAA2B;IAC3B,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,6BAA6B;IAC7B,mBAAmB;IACnB,eAAe;IACf,aAAa;AACjB;AACA;IACI,oCAAoC;IACpC,mBAAmB;IACnB,aAAa;IACb,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,cAAc;IACd,cAAc;IACd,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;AACpB;AACA;IACI,gCAAgC;IAChC,eAAe;IACf,kBAAkB;IAClB,YAAY;IACZ,UAAU;IACV,YAAY;IACZ,gBAAgB;IAChB,cAAc;AAClB;AACA;IACI,YAAY;IACZ,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,yBAAyB;AAC7B;AACA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,aAAa;IACb,eAAe;AACnB;AACA;IACI,cAAc;IACd,cAAc;IACd,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;AACpB;AACA;IACI,gCAAgC;IAChC,eAAe;IACf,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,gBAAgB;IAChB,cAAc;AAClB;AACA;IACI,YAAY;IACZ,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,gBAAgB;IAChB,kBAAkB;AACtB;AACA;IACI,cAAc;IACd,gBAAgB;IAChB,UAAU;IACV,YAAY;IACZ,iBAAiB;IACjB,SAAS;IACT,wBAAwB;IACxB,UAAU;AACd;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb;AACA;IACI,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,qBAAqB;IACrB,6BAA6B;IAC7B,cAAc;IACd,+CAA+C;IAC/C,uCAAuC;OACpC,oCAAoC;QACnC,mCAAmC;SAClC,kCAAkC;YAC/B,+BAA+B;AAC3C;AACA;IACI,eAAe;IACf,wBAAwB;IACxB,mBAAmB;IACnB,WAAW;AACf;AACA;IACI,gCAAgC;IAChC,eAAe;IACf,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,gBAAgB;IAChB,cAAc;AAClB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,UAAU;IACV,WAAW;IACX,aAAa;IACb,eAAe;AACnB;AACA;IACI,YAAY;IACZ,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,yBAAyB;AAC7B",sourcesContent:["/* fonts */\n@font-face {\n    font-family: 'Cantarell-Regular';\n    src: url('../fonts/Cantarell-Regular.ttf');\n}\n@font-face {\n    font-family: 'Libre Franklin';\n    src: url('../fonts/LibreFranklin-ExtraBold.ttf');\n}\n@font-face {\n    font-family: 'MuktaVaani-Light';\n    src: url('../fonts/MuktaVaani-Light.ttf');\n}\n\n\n#content {\n    display: grid; \n    grid-template-columns: 0.3fr 1.5fr; \n    grid-template-rows: 5rem 1.7fr; \n    gap: 0px 0px; \n    grid-template-areas: \n        \"header header\"\n        \"side-bar content\"; \n    overflow: hidden;\n}\n#content {\n    height: 100vh;\n    width: 100vw;\n}\n.header {\n    grid-area: header;\n    background-color: #1F1B26;\n    display: flex; \n    overflow: hidden;\n    justify-content: flex-start;\n    align-items: center;\n}\n.header > h1 {\n    padding-left: 30px;\n    font-family: 'Libre Franklin';\n    font-style: initial;\n    font-size: 30px;\n    color:#F5F4F4;\n}\n.side-bar {\n    background-color: rgb(226, 226, 226);\n    grid-area: side-bar;\n    padding: 10px;\n    min-width: 250px;\n    max-width: 300px;\n}\n\n.default-section {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    margin-top: 10px;\n}\n.default-title {\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: oblique;\n    font-weight: 500;\n}\n.default-buttons {\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n    border-radius: 5px;\n    margin: 15px;\n    width: 90%;\n    border: none;\n    background: none;\n    color: #1F1B26;\n}\n.default-buttons:hover {\n    color: white;\n    font-weight: bolder;\n    cursor: pointer;\n    background: transparent;\n    background-color: #1F1B26;\n}\n.fa-house {\n    margin-right: 5px;\n}\n\n.projects-section {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    margin-top: 5px;\n}\n.projects-title {\n    color: #1F1B26;\n    font-size: 2em; \n    font-family: 'Libre Franklin';\n    font-style: oblique;\n    font-weight: 500;\n}\n.project-button {\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n    border-radius: 5px;\n    width: 90%;\n    margin: 15px;\n    border: none;\n    background: none;\n    color: #1F1B26;\n}\n.project-button:hover {\n    color: white;\n    font-weight: bolder;\n    cursor: pointer;\n    background: transparent;\n    background-color: #1F1B26;\n}\n.project-add-div {\n    width: 90%;\n    margin-top: 10px;\n    text-align: center; \n}\n#project-add-task {\n    color: #1F1B26;\n    background: none;\n    width: 80%;\n    margin: 10px;\n    font-size: 1.3rem;\n    border: 0;\n    border-bottom: 2px solid;\n    outline: 0;\n}\n.project-button-container {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n}\n.project-button-bar {\n    font-size: 14px;\n    border-radius: 2px;\n    padding: 11px 16px;\n    width: 100px;\n}\n.project-button-bar {\n    border-color: #1F1B26;\n    background-color: transparent;\n    color: #1F1B26;\n    box-shadow: 0px 10px 20px -6px rgb(0 0 0 / 12%);\n    -webkit-transition: all .4s ease-in-out;\n       -moz-transition: all .4s ease-in-out;\n        -ms-transition: all .4s ease-in-out;\n         -o-transition: all .4s ease-in-out;\n            transition: all .4s ease-in-out;\n}\n.project-button-bar:hover {\n    cursor: pointer;\n    border:solid 2px #1F1B26;\n    background: #1F1B26;\n    color: #fff;\n}\n.project-items {\n    font-family: 'Cantarell-Regular';\n    font-size: 20px;\n    border-radius: 5px;\n    width: 90%;\n    margin: 15px;\n    border: none;\n    background: none;\n    color: #1F1B26;\n}\n.project-items {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 70%;\n    margin: 5px;\n    padding: 10px;\n    cursor: default;\n}\n.project-items:hover {\n    color: white;\n    font-weight: bolder;\n    cursor: pointer;\n    background: transparent;\n    background-color: #1F1B26;\n}"],sourceRoot:""}]);const C=A},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",a=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),a&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),a&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,a,o,r){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);a&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},667:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(o," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,a=0;a<t.length;a++)if(t[a].identifier===n){e=a;break}return e}function a(n,a){for(var r={},i=[],s=0;s<n.length;s++){var d=n[s],c=a.base?d[0]+a.base:d[0],l=r[c]||0,u="".concat(c," ").concat(l);r[c]=l+1;var A=e(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var f=o(m,a);a.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var r=a(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<r.length;i++){var s=e(r[i]);t[s].references--}for(var d=a(n,o),c=0;c<r.length;c++){var l=e(r[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=d}}},569:n=>{var t={};n.exports=function(n,e){var a=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,o&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(a,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},505:(n,t,e)=>{n.exports=e.p+"5b469c70a5057e66d742.ttf"},204:(n,t,e)=>{n.exports=e.p+"dd7a00dd0653ec2dbe2e.ttf"},622:(n,t,e)=>{n.exports=e.p+"86e01431392b060d0303.ttf"}},t={};function e(a){var o=t[a];if(void 0!==o)return o.exports;var r=t[a]={id:a,exports:{}};return n[a](r,r.exports,e),r.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var a in t)e.o(t,a)&&!e.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:t[a]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var a=t.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,(()=>{var n=e(379),t=e.n(n),a=e(795),o=e.n(a),r=e(569),i=e.n(r),s=e(565),d=e.n(s),c=e(216),l=e.n(c),u=e(589),A=e.n(u),m=e(890),f={};f.styleTagTransform=A(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var p=e(434),C={};C.styleTagTransform=A(),C.setAttributes=d(),C.insert=i().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=l(),t()(p.Z,C),p.Z&&p.Z.locals&&p.Z.locals;var h=e(756),g={};function b(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function B(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function v(n){B(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function w(n,t){B(2,arguments);var e=v(n),a=b(t);return isNaN(a)?new Date(NaN):a?(e.setDate(e.getDate()+a),e):e}function x(n){return B(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function y(n){if(B(1,arguments),!x(n)&&"number"!=typeof n)return!1;var t=v(n);return!isNaN(Number(t))}g.styleTagTransform=A(),g.setAttributes=d(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=l(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var I={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function k(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,a=n.formats[e]||n.formats[n.defaultWidth];return a}}const L={date:k({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:k({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:k({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var T={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(n){return function(t,e){var a,o=e||{};if("formatting"===(o.context?String(o.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,i=o.width?String(o.width):r;a=n.formattingValues[i]||n.formattingValues[r]}else{var s=n.defaultWidth,d=o.width?String(o.width):n.defaultWidth;a=n.values[d]||n.values[s]}return a[n.argumentCallback?n.argumentCallback(t):t]}}const j={ordinalNumber:function(n,t){var e=Number(n),a=e%100;if(a>20||a<10)switch(a%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function M(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=e.width,o=a&&n.matchPatterns[a]||n.matchPatterns[n.defaultMatchWidth],r=t.match(o);if(!r)return null;var i,s=r[0],d=a&&n.parsePatterns[a]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(d)?S(d,(function(n){return n.test(s)})):F(d,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(c):c,i=e.valueCallback?e.valueCallback(i):i;var l=t.slice(s.length);return{value:i,rest:l}}}function F(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function S(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}var U,D={ordinalNumber:(U={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(U.matchPattern);if(!e)return null;var a=e[0],o=n.match(U.parsePattern);if(!o)return null;var r=U.valueCallback?U.valueCallback(o[0]):o[0];r=t.valueCallback?t.valueCallback(r):r;var i=n.slice(a.length);return{value:r,rest:i}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Y={code:"en-US",formatDistance:function(n,t,e){var a,o=I[n];return a="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+a:a+" ago":a},formatLong:L,formatRelative:function(n,t,e,a){return T[n]},localize:j,match:D,options:{weekStartsOn:0,firstWeekContainsDate:1}};function P(n,t){B(2,arguments);var e=v(n).getTime(),a=b(t);return new Date(e+a)}function q(n,t){B(2,arguments);var e=b(t);return P(n,-e)}var W=864e5;function N(n){B(1,arguments);var t=1,e=v(n),a=e.getUTCDay(),o=(a<t?7:0)+a-t;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function z(n){B(1,arguments);var t=v(n),e=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(e+1,0,4),a.setUTCHours(0,0,0,0);var o=N(a),r=new Date(0);r.setUTCFullYear(e,0,4),r.setUTCHours(0,0,0,0);var i=N(r);return t.getTime()>=o.getTime()?e+1:t.getTime()>=i.getTime()?e:e-1}function H(n){B(1,arguments);var t=z(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var a=N(e);return a}var O=6048e5;function R(n,t){B(1,arguments);var e=t||{},a=e.locale,o=a&&a.options&&a.options.weekStartsOn,r=null==o?0:b(o),i=null==e.weekStartsOn?r:b(e.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=v(n),d=s.getUTCDay(),c=(d<i?7:0)+d-i;return s.setUTCDate(s.getUTCDate()-c),s.setUTCHours(0,0,0,0),s}function Z(n,t){B(1,arguments);var e=v(n),a=e.getUTCFullYear(),o=t||{},r=o.locale,i=r&&r.options&&r.options.firstWeekContainsDate,s=null==i?1:b(i),d=null==o.firstWeekContainsDate?s:b(o.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(a+1,0,d),c.setUTCHours(0,0,0,0);var l=R(c,t),u=new Date(0);u.setUTCFullYear(a,0,d),u.setUTCHours(0,0,0,0);var A=R(u,t);return e.getTime()>=l.getTime()?a+1:e.getTime()>=A.getTime()?a:a-1}function $(n,t){B(1,arguments);var e=t||{},a=e.locale,o=a&&a.options&&a.options.firstWeekContainsDate,r=null==o?1:b(o),i=null==e.firstWeekContainsDate?r:b(e.firstWeekContainsDate),s=Z(n,t),d=new Date(0);d.setUTCFullYear(s,0,i),d.setUTCHours(0,0,0,0);var c=R(d,t);return c}var Q=6048e5;function X(n,t){for(var e=n<0?"-":"",a=Math.abs(n).toString();a.length<t;)a="0"+a;return e+a}const V=function(n,t){var e=n.getUTCFullYear(),a=e>0?e:1-e;return X("yy"===t?a%100:a,t.length)},G=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):X(e+1,2)},J=function(n,t){return X(n.getUTCDate(),t.length)},_=function(n,t){return X(n.getUTCHours()%12||12,t.length)},K=function(n,t){return X(n.getUTCHours(),t.length)},nn=function(n,t){return X(n.getUTCMinutes(),t.length)},tn=function(n,t){return X(n.getUTCSeconds(),t.length)},en=function(n,t){var e=t.length,a=n.getUTCMilliseconds();return X(Math.floor(a*Math.pow(10,e-3)),t.length)};var an={G:function(n,t,e){var a=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(a,{width:"abbreviated"});case"GGGGG":return e.era(a,{width:"narrow"});default:return e.era(a,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var a=n.getUTCFullYear(),o=a>0?a:1-a;return e.ordinalNumber(o,{unit:"year"})}return V(n,t)},Y:function(n,t,e,a){var o=Z(n,a),r=o>0?o:1-o;return"YY"===t?X(r%100,2):"Yo"===t?e.ordinalNumber(r,{unit:"year"}):X(r,t.length)},R:function(n,t){return X(z(n),t.length)},u:function(n,t){return X(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return X(a,2);case"Qo":return e.ordinalNumber(a,{unit:"quarter"});case"QQQ":return e.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(a,{width:"narrow",context:"formatting"});default:return e.quarter(a,{width:"wide",context:"formatting"})}},q:function(n,t,e){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return X(a,2);case"qo":return e.ordinalNumber(a,{unit:"quarter"});case"qqq":return e.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(a,{width:"narrow",context:"standalone"});default:return e.quarter(a,{width:"wide",context:"standalone"})}},M:function(n,t,e){var a=n.getUTCMonth();switch(t){case"M":case"MM":return G(n,t);case"Mo":return e.ordinalNumber(a+1,{unit:"month"});case"MMM":return e.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(a,{width:"narrow",context:"formatting"});default:return e.month(a,{width:"wide",context:"formatting"})}},L:function(n,t,e){var a=n.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return X(a+1,2);case"Lo":return e.ordinalNumber(a+1,{unit:"month"});case"LLL":return e.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(a,{width:"narrow",context:"standalone"});default:return e.month(a,{width:"wide",context:"standalone"})}},w:function(n,t,e,a){var o=function(n,t){B(1,arguments);var e=v(n),a=R(e,t).getTime()-$(e,t).getTime();return Math.round(a/Q)+1}(n,a);return"wo"===t?e.ordinalNumber(o,{unit:"week"}):X(o,t.length)},I:function(n,t,e){var a=function(n){B(1,arguments);var t=v(n),e=N(t).getTime()-H(t).getTime();return Math.round(e/O)+1}(n);return"Io"===t?e.ordinalNumber(a,{unit:"week"}):X(a,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):J(n,t)},D:function(n,t,e){var a=function(n){B(1,arguments);var t=v(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),o=e-a;return Math.floor(o/W)+1}(n);return"Do"===t?e.ordinalNumber(a,{unit:"dayOfYear"}):X(a,t.length)},E:function(n,t,e){var a=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},e:function(n,t,e,a){var o=n.getUTCDay(),r=(o-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return X(r,2);case"eo":return e.ordinalNumber(r,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(n,t,e,a){var o=n.getUTCDay(),r=(o-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return X(r,t.length);case"co":return e.ordinalNumber(r,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(n,t,e){var a=n.getUTCDay(),o=0===a?7:a;switch(t){case"i":return String(o);case"ii":return X(o,t.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},a:function(n,t,e){var a=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(n,t,e){var a,o=n.getUTCHours();switch(a=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(n,t,e){var a,o=n.getUTCHours();switch(a=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var a=n.getUTCHours()%12;return 0===a&&(a=12),e.ordinalNumber(a,{unit:"hour"})}return _(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):K(n,t)},K:function(n,t,e){var a=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(a,{unit:"hour"}):X(a,t.length)},k:function(n,t,e){var a=n.getUTCHours();return 0===a&&(a=24),"ko"===t?e.ordinalNumber(a,{unit:"hour"}):X(a,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):nn(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):tn(n,t)},S:function(n,t){return en(n,t)},X:function(n,t,e,a){var o=(a._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return rn(o);case"XXXX":case"XX":return sn(o);default:return sn(o,":")}},x:function(n,t,e,a){var o=(a._originalDate||n).getTimezoneOffset();switch(t){case"x":return rn(o);case"xxxx":case"xx":return sn(o);default:return sn(o,":")}},O:function(n,t,e,a){var o=(a._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+on(o,":");default:return"GMT"+sn(o,":")}},z:function(n,t,e,a){var o=(a._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+on(o,":");default:return"GMT"+sn(o,":")}},t:function(n,t,e,a){var o=a._originalDate||n;return X(Math.floor(o.getTime()/1e3),t.length)},T:function(n,t,e,a){return X((a._originalDate||n).getTime(),t.length)}};function on(n,t){var e=n>0?"-":"+",a=Math.abs(n),o=Math.floor(a/60),r=a%60;if(0===r)return e+String(o);var i=t||"";return e+String(o)+i+X(r,2)}function rn(n,t){return n%60==0?(n>0?"-":"+")+X(Math.abs(n)/60,2):sn(n,t)}function sn(n,t){var e=t||"",a=n>0?"-":"+",o=Math.abs(n);return a+X(Math.floor(o/60),2)+e+X(o%60,2)}const dn=an;function cn(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function ln(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const un={p:ln,P:function(n,t){var e,a=n.match(/(P+)(p+)?/)||[],o=a[1],r=a[2];if(!r)return cn(n,t);switch(o){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",cn(o,t)).replace("{{time}}",ln(r,t))}};function An(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}var mn=["D","DD"],fn=["YY","YYYY"];function pn(n){return-1!==mn.indexOf(n)}function Cn(n){return-1!==fn.indexOf(n)}function hn(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"))}var gn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,bn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Bn=/^'([^]*?)'?$/,vn=/''/g,wn=/[a-zA-Z]/;function xn(n,t,e){B(2,arguments);var a=String(t),o=e||{},r=o.locale||Y,i=r.options&&r.options.firstWeekContainsDate,s=null==i?1:b(i),d=null==o.firstWeekContainsDate?s:b(o.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=r.options&&r.options.weekStartsOn,l=null==c?0:b(c),u=null==o.weekStartsOn?l:b(o.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!r.localize)throw new RangeError("locale must contain localize property");if(!r.formatLong)throw new RangeError("locale must contain formatLong property");var A=v(n);if(!y(A))throw new RangeError("Invalid time value");var m=An(A),f=q(A,m),p={firstWeekContainsDate:d,weekStartsOn:u,locale:r,_originalDate:A},C=a.match(bn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,un[t])(n,r.formatLong,p):n})).join("").match(gn).map((function(e){if("''"===e)return"'";var a=e[0];if("'"===a)return yn(e);var i=dn[a];if(i)return!o.useAdditionalWeekYearTokens&&Cn(e)&&hn(e,t,n),!o.useAdditionalDayOfYearTokens&&pn(e)&&hn(e,t,n),i(f,e,r.localize,p);if(a.match(wn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join("");return C}function yn(n){return n.match(Bn)[1].replace(vn,"'")}let In=function(){localStorage.getItem("list")?(console.log("Loading Inbox"),function(){const n=document.getElementById("task-list"),t=localStorage.getItem("list");n.innerHTML=t}()):console.log("Nothing in Inbox")},kn=function(){const n=document.querySelector(".projects-list");localStorage.setItem("projList",n.innerHTML)},Ln=function(){localStorage.getItem("projList")?(console.log("Loading Projects"),function(){const n=document.querySelector(".projects-list"),t=localStorage.getItem("projList");n.innerHTML=t}()):console.log("Nothing in Projects")},Tn=function(){document.querySelector(".projects-list").addEventListener("click",(function(n){if(n.target.classList.contains("project-items")){let t=this.lastElementChild.lastElementChild;const e=n.target.id;console.log(`The target is ${e}`),Fn(e),t.onclick=function(){console.log("Del working"),Mn(),this.parentNode.parentNode.removeChild(this.parentNode),kn(),Ln(),localStorage.removeItem(e)}}}))},En=function(n){localStorage.getItem(n)?(console.log(`Loading Project ${n}`),function(n){const t=document.getElementById(`${n}-task-list`),e=localStorage.getItem(n);t.innerHTML=e}(n)):console.log(`Project ${n} empty`)};class jn{constructor(n,t){this.name=n,this.name=t}static addToDom(n,t){let e=document.getElementById("task-list");const a=document.createElement("li");a.classList.add("task-items");const o=document.createElement("span");o.innerText=n;const r=document.createElement("div");r.classList.add("date-picker-div");const i=document.createElement("p");i.id="due",i.textContent=t;const s=document.createRange().createContextualFragment("<div class='delete-button' onclick='this.parentNode.parentNode.removeChild(this.parentNode); \n        localStorage.setItem(\"list\", document.getElementById(\"task-list\").innerHTML);\n        localStorage.getItem(\"list\");\n        '><i class='fa-solid fa-trash'></i></div>");return r.appendChild(i),a.appendChild(o),a.appendChild(r),a.appendChild(s),e.appendChild(a),function(){const n=document.getElementById("task-list");localStorage.setItem("list",n.innerHTML)}(),In(),a}static addProjectDom(n,t,e){let a=document.getElementById(`${e}-task-list`);const o=document.createElement("li");o.classList.add("task-items");const r=document.createElement("span");r.innerText=n;const i=document.createElement("div");i.classList.add("date-picker-div");const s=document.createElement("p");s.id="due",s.textContent=t;let d=`<div class='delete-button' onclick='this.parentNode.parentNode.removeChild(this.parentNode); \n        localStorage.setItem("${e}", document.getElementById("${e}-task-list").innerHTML);\n        localStorage.getItem("${e}");\n        '><i class='fa-solid fa-trash'></i></div>`;const c=document.createRange().createContextualFragment(d);return i.appendChild(s),o.appendChild(r),o.appendChild(i),o.appendChild(c),a.appendChild(o),function(n){const t=document.getElementById(`${n}-task-list`);localStorage.setItem(n,t.innerHTML)}(e),En(e),o}addTask(n,t){n.length>20?alert("Too big"):n.length<3?alert("Too short"):0==n.length?alert("Please enter a task"):(this.name=n,this.date=t,jn.addToDom(n,t))}addProjectTask(n,t,e){n.length>20?alert("Too big"):n.length<3?alert("Too short"):0==n.length?alert("Please enter a task"):(this.name=n,this.date=t,jn.addProjectDom(n,t,e))}}let Mn=function(){const n=document.getElementById("main-container");n.innerHTML="",n.classList.add("inbox-container"),n.classList.remove("project-container");const t=document.createElement("h2");t.id="inbox",t.textContent="Inbox";const e=document.createElement("div");e.id="task-list",e.classList.add("task-list-holder"),n.appendChild(t),n.appendChild(e);const a=function(){const n=document.getElementById("main-container");let t,e,a=new jn;const o=document.createElement("div");o.classList.add("add-container-div"),o.classList.add("close");const r=document.createElement("input");r.id="input-add-task",r.placeholder="Task name...",r.addEventListener("input",(function(n){t=this.value})),o.appendChild(r);const i=document.createElement("input");i.type="date",i.id="date-picker",i.addEventListener("change",(function(){let n=new Date(i.valueAsDate);console.log(n);let t=xn(w(n,1),"MM/dd/yyyy");e=t,console.log(t)})),o.appendChild(i);const s=document.createElement("button"),d=document.createElement("div");d.classList.add("left-panel"),d.innerHTML='<i class="fa-solid fa-plus"></i>',s.classList.add("task-add"),s.textContent="Add task",s.addEventListener("click",(()=>{o.classList.remove("close"),s.classList.add("close")}));const c=document.createElement("div");c.classList.add("button-container-tasks"),o.appendChild(c);const l=document.createElement("button");l.classList.add("buttons-tasks-add"),l.id="add-task",l.textContent="Add",l.addEventListener("click",(()=>{null===i.valueAsDate&&(e="No due date"),a.addTask(t,e),o.classList.add("close"),s.classList.remove("close")})),r.addEventListener("keydown",(n=>{null===i.valueAsDate&&(e="No due date"),"Enter"===n.key&&(a.addTask(t,e),o.classList.add("close"),s.classList.remove("close"))}));const u=document.createElement("button");return u.classList.add("buttons-tasks-add"),u.id="cancel-task",u.textContent="Cancel",u.addEventListener("click",(function(){o.classList.add("close"),s.classList.remove("close"),console.log("clicked")})),c.appendChild(l),c.appendChild(u),n.appendChild(s),s.appendChild(d),o}();return n.appendChild(a),In(),n},Fn=function(n){const t=document.getElementById("main-container");t.innerHTML="",t.classList.add("project-container");const e=document.createElement("h2");e.id=n,e.classList.add("task-list"),e.classList.add("project-sub-head"),e.textContent=n;const a=document.createElement("div");a.id=`${n}-task-list`,a.classList.add("task-list-holder"),t.appendChild(e),t.appendChild(a);const o=function(n){const t=document.getElementById("main-container");let e,a,o=new jn;const r=document.createElement("div");r.classList.add("add-container-div"),r.classList.add("close");const i=document.createElement("input");i.id="input-add-task",i.placeholder="Task name...",i.addEventListener("input",(function(n){e=this.value})),r.appendChild(i);const s=document.createElement("input");s.type="date",s.id="date-picker",s.addEventListener("change",(function(){let n=new Date(s.valueAsDate);console.log(n);let t=xn(w(n,1),"MM/dd/yyyy");a=t,console.log(t)})),r.appendChild(s);const d=document.createElement("button"),c=document.createElement("div");c.classList.add("left-panel"),c.innerHTML='<i class="fa-solid fa-plus"></i>',d.classList.add("task-add"),d.textContent="Add task",d.addEventListener("click",(()=>{r.classList.remove("close"),d.classList.add("close")}));const l=document.createElement("div");l.classList.add("button-container-tasks"),r.appendChild(l);const u=document.createElement("button");u.classList.add("buttons-tasks-add"),u.id="add-task",u.textContent="Add",u.addEventListener("click",(()=>{null===s.valueAsDate&&(a="No due date"),o.addProjectTask(e,a,n),r.classList.add("close"),d.classList.remove("close")})),i.addEventListener("keydown",(t=>{null===s.valueAsDate&&(a="No due date"),"Enter"===t.key&&(o.addProjectTask(e,a,n),r.classList.add("close"),d.classList.remove("close"))}));const A=document.createElement("button");return A.classList.add("buttons-tasks-add"),A.id="cancel-task",A.textContent="Cancel",A.addEventListener("click",(function(){r.classList.add("close"),d.classList.remove("close"),console.log("clicked")})),l.appendChild(u),l.appendChild(A),t.appendChild(d),d.appendChild(c),r}(n);return t.appendChild(o),En(n),t},Sn=function(){let n;const t=document.querySelector(".project-add-div"),e=document.querySelector(".project-button"),a=document.querySelector(".projects-list");e.classList.add("close"),t.classList.remove("close"),t.innerHTML="";const o=document.createElement("input");o.id="project-add-task",o.placeholder="Project name...",o.addEventListener("input",(function(t){n=this.value})),t.appendChild(o);const r=document.createElement("div");r.classList.add("project-button-container"),t.appendChild(r);const i=document.createElement("button");i.classList.add("project-button-bar"),i.id="add-task-bar",i.textContent="Add",i.addEventListener("click",(function(){t.classList.add("close"),e.classList.remove("close");const o=`\n        <div class='project-items' id='${n}'>\n            <i class="fa-solid fa-angle-right"></i>\n                ${n}\n            <div class='proj-del-button' id='${n}-del' onclick='\n            this.parentNode.parentNode.removeChild(this.parentNode); \n            localStorage.setItem("projList", document.querySelector(".projects-list").innerHTML);\n            localStorage.getItem("projList");\n            localStorage.removeItem("${n}");\n            '><i class='fa-solid fa-trash'></i>\n            </div>\n        </div>`,r=document.createRange().createContextualFragment(o);return a.appendChild(r),kn(),Ln(),o})),o.addEventListener("keydown",(o=>{if("Enter"===o.key){t.classList.add("close"),e.classList.remove("close");const o=`\n            <div class='project-items' id='${n}'>\n                <i class="fa-solid fa-angle-right"></i>\n                    ${n}\n                <div class='proj-del-button' id='${n}-del' onclick='\n                this.parentNode.parentNode.removeChild(this.parentNode); \n                localStorage.setItem("projList", document.querySelector(".projects-list").innerHTML);\n                localStorage.getItem("projList");\n                localStorage.removeItem("${n}");\n                '><i class='fa-solid fa-trash'></i>\n                </div>\n            </div>`,r=document.createRange().createContextualFragment(o);return a.appendChild(r),kn(),Ln(),o}}));const s=document.createElement("button");return s.classList.add("project-button-bar"),s.id="cancel-task-bar",s.textContent="Cancel",s.addEventListener("click",(function(){t.classList.add("close"),e.classList.remove("close")})),r.appendChild(i),r.appendChild(s),Ln(),Tn(),t},Un=function(){const n=document.createElement("nav");n.classList.add("side-bar");const t=function(){const n=document.createElement("div");n.classList.add("default-section");const t=function(n,t){const e=document.createElement("button");return e.classList.add("default-buttons"),e.id="default-inbox",e.innerHTML='<i class="fa-solid fa-house"></i>inbox',e}(),e=document.createElement("p");return e.classList.add("default-title"),e.innerText="Tasks",n.appendChild(e),n.appendChild(t),n}();n.appendChild(t);const e=function(){const n=document.createElement("div");n.classList.add("projects-section");const t=document.createElement("p");t.classList.add("projects-title"),t.innerText="Projects",n.appendChild(t);const e=document.createElement("div");e.classList.add("projects-list"),n.appendChild(e);const a=document.createElement("button");a.classList.add("project-button"),a.innerHTML+='<i class="fa-solid fa-plus"></i>',a.innerHTML+=" Add Project",n.appendChild(a);const o=document.createElement("div");return o.classList.add("project-add-div"),o.classList.add("close"),n.appendChild(o),n}();return n.appendChild(e),n};document.addEventListener("DOMContentLoaded",(function(){const n=document.getElementById("content"),t=function(){const n=document.createElement("header");n.classList.add("header");const t=document.createElement("h1");return t.textContent="*To-Do List",n.appendChild(t),n}();n.appendChild(t);const e=Un();n.appendChild(e);const a=function(){const n=document.createElement("div");return n.id="main-container",n}();n.appendChild(a),Mn(),Ln(),Tn(),document.getElementById("default-inbox").addEventListener("click",Mn),document.querySelector(".project-button").addEventListener("click",Sn)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,